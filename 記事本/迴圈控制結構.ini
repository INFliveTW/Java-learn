迴圈控制結構
if-else
[使用時機]
- 條件範圍檢查（如 is4xxClientError()）<br>- 少數條件（2-3 個）<br>- 條件非固定值
[效能特點]
- 線性比較，每次條件都需要評估<br>- 少數條件時效率高<br>- 多條件時效能下降
[程式碼量影響]
- 每個條件需單獨撰寫，程式碼稍長
[適用場景範例]
- 檢查狀態碼範圍<br>- 動態條件判斷

switch-case
[使用時機]
- 固定值比較（如 400、404）<br>- 多個離散值（4 個以上）<br>- 枚舉或整數值
[效能特點]
- 少數條件時與 if-else 相近<br>- 多條件時可能優化為查找表，提升效率
[程式碼量影響]
- 條件集中撰寫，稍簡潔
[適用場景範例]
- HTTP 狀態碼處理<br>- 枚舉值分支

for 迴圈 
[使用時機]
- 已知迭代次數<br>- 遍歷陣列或集合
[效能特點]
- 高效率，迭代次數明確<br>- 編譯器易優化
[程式碼量影響]
- 固定結構，程式碼簡潔
[適用場景範例]
- 遍歷天氣資料列表

while 迴圈
[使用時機]
- 條件驅動迭代<br>- 不確定迭代次數
[效能特點]
- 每次檢查條件，效能略低於 for<br>- 適合動態退出
[程式碼量影響]
- 條件需明確，略長
[適用場景範例]
- 等待 API 回應

do-while 迴圈
[使用時機]
- 至少執行一次<br>- 條件後檢查
[效能特點]
- 與 while 類似，但保證首次執行<br>- 效能略低於 for
[程式碼量影響]
- 類似 while，稍長
[適用場景範例]
- 重試 API 請求至少一次

for-each 迴圈
[使用時機]
- 遍歷集合或陣列<br>- 不需索引
[效能特點]
- 高效率，內部優化迭代器<br>- 無索引控制時最佳
[程式碼量影響]
- 最簡潔，無索引管理
[適用場景範例]
- 處理天氣回應陣列
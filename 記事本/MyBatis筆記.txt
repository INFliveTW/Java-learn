MyBatis Starter、簡單的資料庫
src
 ├── main
 │   ├── java/com/example/usermanagement
 │   │   ├── model          // 資料模型 (User.java)
 │   │   ├── repository     // MyBatis Mapper (UserRepository.java)
 │   │   ├── service        // 業務邏輯 (UserService.java)
 │   │   ├── controller     // 控制層 (UserController.java)
 │   │   ├── UsermanagementApplication.java
 │   ├── resources
 │   │   ├── application.yml   // Spring Boot 設定檔
 │   │   ├── mappers           // MyBatis XML (可選)
 ├── docker-compose.yml        // Docker 設定
 ├── build.gradle              // Gradle 依賴管理

User.java（Model 層）
 User 類別，對應 users 資料表，包含 id、name、email 屬性。

UserRepository.java（Repository 層）
@Mapper：讓 MyBatis 掃描這個 Repository
@Select、@Insert、@Delete**：直接在 Java 內寫 SQL 指令


UserService.java（Service 層）
Service 負責業務邏輯
透過 Repository 層 來處理資料庫存取
提供 CRUD（創建、查詢、儲存、刪除）

UserController.java（Controller 層）
@RestController：標示為 REST API
@RequestMapping("/users")：設定 API 路徑
@GetMapping, @PostMapping, @DeleteMapping：對應不同 HTTP 方法
查詢、新增、刪除資料

GET     /users      查詢所有使用者
GET     /users/{id} 查詢特定使用者
POST    /users      新增使用者
PUT     /users/{id} 更新使用者
DELETE  /users/{id} 刪除使用者

MyBatis 透過Spring Boot 的 application.yml 設定檔

不使用XML 使用 Mapper
來自動載入資料庫連線設定以及MyBatis相關設定

Docker 設定 docker-compose.yml

啟動 Docker

創建資料庫

執行專案 ./gradlew bootRun

指定users資料
http://localhost:8080/usersmanagment/api/1

.../users/1 查詢指定使用者(1號)
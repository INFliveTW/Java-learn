plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco' // 添加 Jacoco 插件
}

group = 'cdf.training.svc'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'com.opencsv:opencsv:5.9'
    implementation 'org.springframework.integration:spring-integration-sftp'
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.opencsv:opencsv:5.9'
    
    // 測試依賴
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    //useJUnitPlatform() // 使用 JUnit 5
    finalizedBy jacocoTestReport // 測試完成後自動執行 jacocoTestReport 任務
    filter {
        includeTestsMatching "*Test" // 只執行以 Test 結尾的類
    }
}

tasks.named('test') {
    systemProperty "file.encoding", "UTF-8"
    useJUnitPlatform()
}
// 配置 Jacoco 插件
jacoco {
    toolVersion = "0.8.12" // 與 Gradle 8.13 相容的版本
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

// 配置 Jacoco 報告生成
jacocoTestReport {
    dependsOn test // 確保測試任務先執行
    reports {
        xml {
            // 使用 outputLocation 指定 XML 報告路徑
            outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
            required = true // 使用 required 替代 enabled
        }
        html {
            // 使用 outputLocation 指定 HTML 報告路徑
            outputLocation = file("${buildDir}/reports/jacoco/test/html")
            required = true // 使用 required 替代 enabled
        }
    }
}